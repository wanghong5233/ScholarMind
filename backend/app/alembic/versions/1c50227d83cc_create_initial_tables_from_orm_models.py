"""Create initial tables from ORM models

Revision ID: 1c50227d83cc
Revises: 
Create Date: 2025-10-05 13:35:23.422023

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '1c50227d83cc'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('document_uploads',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('session_id', sa.String(length=16), nullable=False),
    sa.Column('document_name', sa.String(length=255), nullable=False),
    sa.Column('document_type', sa.String(length=50), nullable=False),
    sa.Column('file_size', sa.Integer(), nullable=True),
    sa.Column('upload_time', sa.TIMESTAMP(), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('messages',
    sa.Column('message_id', postgresql.UUID(as_uuid=True), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('session_id', sa.String(length=16), nullable=False),
    sa.Column('user_question', sa.Text(), nullable=False),
    sa.Column('model_answer', sa.Text(), nullable=False),
    sa.Column('create_time', sa.TIMESTAMP(), server_default=sa.text('now()'), nullable=True),
    sa.Column('retrieval_content', sa.Text(), nullable=True),
    sa.PrimaryKeyConstraint('message_id')
    )
    op.create_table('sessions',
    sa.Column('session_id', sa.String(length=16), nullable=False),
    sa.Column('session_name', sa.String(length=255), nullable=False),
    sa.Column('user_id', sa.String(length=255), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('session_id')
    )
    op.create_table('users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('username', sa.String(length=50), nullable=False),
    sa.Column('password_hash', sa.String(length=100), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('username')
    )
    op.create_table('knowledgebases',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False, comment='知识库唯一ID'),
    sa.Column('user_id', sa.Integer(), nullable=False, comment='关联的用户ID'),
    sa.Column('name', sa.String(length=255), nullable=False, comment='知识库名称'),
    sa.Column('description', sa.Text(), nullable=True, comment='知识库描述信息'),
    sa.Column('created_at', sa.TIMESTAMP(), server_default=sa.text('now()'), nullable=False, comment='创建时间'),
    sa.Column('updated_at', sa.TIMESTAMP(), server_default=sa.text('now()'), nullable=False, comment='最后更新时间'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('documents',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False, comment='文档唯一ID'),
    sa.Column('knowledge_base_id', sa.Integer(), nullable=False, comment='关联的知识库ID'),
    sa.Column('title', sa.Text(), nullable=False, comment='论文标题'),
    sa.Column('authors', sa.JSON(), nullable=True, comment='作者列表，存储为JSON数组'),
    sa.Column('abstract', sa.Text(), nullable=True, comment='论文摘要'),
    sa.Column('publication_year', sa.Integer(), nullable=True, comment='发表年份'),
    sa.Column('journal_or_conference', sa.String(length=255), nullable=True, comment='期刊或会议名称'),
    sa.Column('keywords', sa.JSON(), nullable=True, comment='论文关键词列表'),
    sa.Column('citation_count', sa.Integer(), nullable=True, comment='被引次数'),
    sa.Column('fields_of_study', sa.JSON(), nullable=True, comment='研究领域列表'),
    sa.Column('doi', sa.String(length=255), nullable=True, comment='Digital Object Identifier'),
    sa.Column('semantic_scholar_id', sa.String(length=255), nullable=True, comment='Semantic Scholar的唯一ID'),
    sa.Column('source_url', sa.Text(), nullable=True, comment='文献来源URL'),
    sa.Column('local_pdf_path', sa.String(length=1024), nullable=True, comment='本地PDF文件存储路径'),
    sa.Column('file_hash', sa.String(length=255), nullable=True, comment='本地文件的SHA256哈希值'),
    sa.Column('ingestion_source', sa.String(length=50), nullable=False, comment='文档来源'),
    sa.Column('created_at', sa.TIMESTAMP(), server_default=sa.text('now()'), nullable=False, comment='创建时间'),
    sa.Column('updated_at', sa.TIMESTAMP(), server_default=sa.text('now()'), nullable=False, comment='最后更新时间'),
    sa.ForeignKeyConstraint(['knowledge_base_id'], ['knowledgebases.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('uq_kb_doi', 'documents', ['knowledge_base_id', 'doi'], unique=True)
    op.create_index('uq_kb_file_hash', 'documents', ['knowledge_base_id', 'file_hash'], unique=True)
    op.create_index('uq_kb_semantic_id', 'documents', ['knowledge_base_id', 'semantic_scholar_id'], unique=True)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('uq_kb_semantic_id', table_name='documents')
    op.drop_index('uq_kb_file_hash', table_name='documents')
    op.drop_index('uq_kb_doi', table_name='documents')
    op.drop_table('documents')
    op.drop_table('knowledgebases')
    op.drop_table('users')
    op.drop_table('sessions')
    op.drop_table('messages')
    op.drop_table('document_uploads')
    # ### end Alembic commands ###
